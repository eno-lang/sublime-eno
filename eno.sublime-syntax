%YAML 1.2
---
name: Eno
file_extensions: [eno]
scope: text.eno

contexts:
  main:
    # name:
    - match: '^\s*+(?![>\-#=:\\|`])([^<=:]+?)\s*(:)\s*$'
      captures:
        1: entity.name.element.eno
        2: punctuation.definition.element.eno

    # name = value
    - match: '^\s*+(?![>\-#\\|`])([^<=:]+?)\s*(=)\s*+(\S.*?)?\s*$'
      captures:
        1: entity.name.fieldset-entry.eno
        2: punctuation.separator.fieldset-entry.eno
        3: value.eno

    # > comment
    - match: '^\s*+(>).*$'
      scope: comment.eno
      captures:
        1: punctuation.definition.comment.eno

    # name: value
    - match: '^\s*+(?![>\-#\\|`])([^<=:]+?)\s*(:)\s*+(\S.*?)\s*$'
      captures:
        1: entity.name.field.eno
        2: punctuation.separator.field.eno
        3: value.eno

    # -- name
    - match: '(--++)\s*+(\S.*?)\s*$'
      push: block
      captures:
        1: punctuation.definition.block.begin.eno
        2: entity.name.block.eno

    # - value
    - match: '^\s*+(-)(?!-)\s*+(\S.*?)?\s*$'
      captures:
        1: punctuation.definition.list-item.eno
        2: value.eno

    # # name [[<]< template]
    - match: '^\s*+(#++)\s*+([^\s<`][^<]*?)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      captures:
        1: punctuation.definition.section.eno
        2: entity.name.section.eno
        3: punctuation.separator.template.eno
        4: entity.name.template.eno

    # | value OR \ value
    - match: '^\s*+(\\|\|)\s*+(\S.*?)?\s*$'
      captures:
        1: punctuation.definition.continuation.eno
        2: value.eno

    # name < template
    - match: '^\s*+(?![>\-#\\|`])([^<=:]+?)\s*(<)\s*+(\S.*?)\s*$'
      captures:
        1: entity.name.element.eno
        2: punctuation.separator.template.eno
        3: entity.name.template.eno

    # `name`:
    - match: '^\s*+(`++)\s*+((?:(?!\1).)+)\s*(\1)\s*+(:)\s*$'
      captures:
        1: punctuation.definition.name.begin.eno
        2: entity.name.element.eno
        3: punctuation.definition.name.end.eno
        4: punctuation.definition.element.eno

    # `name`: value
    - match: '^\s*+(`++)\s*+((?:(?!\1).)+)\s*(\1)\s*+(:)\s*+(\S.*?)\s*$'
      captures:
        1: punctuation.definition.name.begin.eno
        2: entity.name.field.eno
        3: punctuation.definition.name.end.eno
        4: punctuation.separator.field.eno
        5: value.eno

    # `name` < template
    - match: '^\s*+(`++)\s*+((?:(?!\1).)+)\s*(\1)\s*+(<(?!<)|<<)\s*+(\S.*?)\s*$'
      captures:
        1: punctuation.definition.name.begin.eno
        2: entity.name.element.eno
        3: punctuation.definition.name.end.eno
        4: punctuation.separator.template.eno
        5: entity.name.template.eno

    # `name` = value
    - match: '^\s*+(`++)\s*+((?:(?!\1).)+)\s*(\1)\s*+(=)\s*+(.+?)?\s*$'
      captures:
        1: punctuation.definition.name.begin.eno
        2: entity.name.fieldset-entry.eno
        3: punctuation.definition.name.end.eno
        4: punctuation.separator.fieldset-entry.eno
        5: value.eno

    # # `name` [< template]
    - match: '^\s*+(#++)\s*+(`++)\s*+((?:(?!\2).)+)\s*(\2)\s*+(?:(<(?!<)|<<)\s*+(\S.*?)\s*)?$'
      captures:
        1: punctuation.definition.section.eno
        2: punctuation.definition.name.begin.eno
        3: entity.name.section.eno
        4: punctuation.definition.name.end.eno
        5: punctuation.separator.template.eno
        6: entity.name.template.eno

    # Invalid
    - match: '^\s*+(\S.*?)\s*$'
      scope: invalid.illegal.eno

  block:
    - match: '^\s*+(\1)(?!-)\s*+(\2)\s*$'
      captures:
        1: punctuation.definition.block.end.eno
        2: entity.name.block.eno
      pop: true
    - match: '^.*$'
      scope: value.eno
