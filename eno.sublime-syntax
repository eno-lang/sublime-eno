%YAML 1.2
---
name: eno
file_extensions: [eno]
scope: text.eno

contexts:
  main:
    # Name
    # name:
    - match: '^\s*(?![>\-#=:*\\|`])([^<=:]+?)\s*(:)\s*$'
      captures:
        1: name.eno
        2: operator.name.eno

    # Dictionary Entry
    # name = value
    - match: '^\s*(?![>\-#\\|`])([^<=:]+?)\s*(=)\s*(.+?)?\s*$'
      captures:
        1: name.eno
        2: operator.entry.eno
        3: value.eno

    # Comment
    # > text
    - match: '^\s*(>)\s*(.+?)?\s*$'
      captures:
        1: operator.comment.eno
        2: text.comment.eno
      scope: comment.eno

    # Field
    # name: value
    - match: '^\s*(?![>\-#\\|`])([^<=:]+?)\s*(:)\s*(\S.*?)\s*$'
      captures:
        1: name.eno
        2: operator.name.eno
        3: value.eno

    # Block
    # -- name
    - match: '(-{2,})(?!-)\s*(\S[^\n]*?)\s*$'
      push: block
      scope: block.boundary.eno

    # List Item
    # - value
    - match: '^\s*(-)(?!-)\s*(.+?)?\s*$'
      captures:
        1: operator.item.eno
        2: value.item.eno

    # Section 1st
    # # name [[<]< template]
    - match: '^\s*(#)(?!#)\s*([^\s<`][^<]*?)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      scope: section.1st.eno
      captures:
        1: operator.section.1st.eno
        2: name.section.1st.eno
        3: operator.copy.section.1st.eno
        4: template.eno

    # Section 2nd Plus
    # ## name [[<]< template]
    - match: '^\s*(##)(?!#)\s*([^\s<`][^<]*?)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      scope: section.2nd.eno
      captures:
        1: operator.section.2nd.eno
        2: name.section.2nd.eno
        3: operator.copy.section.2nd.eno
        4: template.eno

    # Section 3rd Plus
    # ### name [[<]< template]
    - match: '^\s*(#{3,})(?!#)\s*([^\s<`][^<]*?)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      scope: section.3rd-plus.eno
      captures:
        1: operator.section.3rd-plus.eno
        2: name.section.3rd-plus.eno
        3: operator.copy.section.3rd-plus.eno
        4: template.eno

    # Append
    # | value OR \ value
    - match: '^\s*(\||\\)\s*(.+?)?\s*$'
      captures:
        1: operator.append.eno
        2: append.value.eno

    # Element Copy
    # name < template
    - match: '^\s*(?![>\-#\\|`])([^<=:]+?)\s*(<)\s*(\S.*?)\s*$'
      captures:
        1: .name.eno
        2: operator.copy.eno
        3: template.eno

    # Escaped name
    # `name`:
    - match: '^\s*(`+)\s*((?:(?!\1).)+)\s*(\1)\s*(:)\s*$'
      captures:
        1: operator.escape.eno
        2: name.eno
        3: operator.escape.eno
        4: operator.name.eno

    # Escaped name
    # `name`:
    - match: '^\s*(`+)\s*((?:(?!\1).)+)\s*(\1)\s*(:)\s*(\S.*?)\s*$'
      captures:
        1: operator.escape.eno
        2: name.eno
        3: operator.escape.eno
        4: operator.name.eno
        5: value.eno

    # Escaped Copy
    # `name` < template
    - match: '^\s*(`+)\s*((?:(?!\1).)+)\s*(\1)\s*(<(?!<)|<<)\s*(\S.*?)\s*$'
      captures:
        1: operator.escape.eno
        2: name.eno
        3: operator.escape.eno
        4: operator.copy.eno
        5: template.eno

    # Escaped Dictionary Entry
    # `name` = value
    - match: '^\s*(`+)\s*((?:(?!\1).)+)\s*(\1)\s*(=)\s*(.+?)?\s*$'
      captures:
        1: operator.escape.eno
        2: name.eno
        3: operator.escape.eno
        4: operator.entry.eno
        5: value.eno

    # Escaped Section 1st
    # # `name` [< template]
    - match: '^\s*(#)(?!#)\s*(`+)\s*((?:(?!\2).)+)\s*(\2)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      scope: section.1st.eno
      captures:
        1: operator.section.1st.eno
        2: operator.escape.eno
        3: name.section.1st.eno
        4: operator.escape.eno
        5: operator.copy.section.1st.eno
        6: template.eno

    # Escaped Section 2nd
    # ## `name` [< template]
    - match: '^\s*(##)(?!#)\s*(`+)\s*((?:(?!\2).)+)\s*(\2)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      scope: section.2nd.eno
      captures:
        1: operator.section.2nd.eno
        2: operator.escape.eno
        3: name.section.2nd.eno
        4: operator.escape.eno
        5: operator.copy.section.2nd.eno
        6: template.eno

    # Escaped Section 3rd Plus
    # ### `name` [< template]
    - match: '^\s*(#{3,})(?!#)\s*(`+)\s*((?:(?!\2).)+)\s*(\2)\s*(?:(<(?!<)|<<)\s*(\S.*?)\s*)?$'
      scope: section.3rd-plus.eno
      captures:
        1: operator.section.3rd-plus.eno
        2: operator.escape.eno
        3: name.section.3rd-plus.eno
        4: operator.escape.eno
        5: operator.copy.section.3rd-plus.eno
        6: template.eno

    # Invalid
    - match: ^.*$
      scope: invalid.eno

  block:
    - match: '^\1\s*\2\s*$'
      scope: block.boundary.eno
      pop: true
